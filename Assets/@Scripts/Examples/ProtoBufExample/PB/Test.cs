// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Example.ProtoBuf {

  #region Messages
  /// <summary>
  ///进入房间请求
  /// </summary>
  public sealed class data : pb::IMessage {
    private static readonly pb::MessageParser<data> _parser = new pb::MessageParser<data>(() => new data());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<data> Parser { get { return _parser; } }

    /// <summary>Field number for the "intValue" field.</summary>
    public const int IntValueFieldNumber = 1;
    private uint intValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IntValue {
      get { return intValue_; }
      set {
        intValue_ = value;
      }
    }

    /// <summary>Field number for the "longValue" field.</summary>
    public const int LongValueFieldNumber = 2;
    private ulong longValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LongValue {
      get { return longValue_; }
      set {
        longValue_ = value;
      }
    }

    /// <summary>Field number for the "strValue" field.</summary>
    public const int StrValueFieldNumber = 3;
    private string strValue_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrValue {
      get { return strValue_; }
      set {
        strValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "intArray" field.</summary>
    public const int IntArrayFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_intArray_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> intArray_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> IntArray {
      get { return intArray_; }
    }

    /// <summary>Field number for the "objectList" field.</summary>
    public const int ObjectListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Example.ProtoBuf.rsp_enter> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(42, global::Example.ProtoBuf.rsp_enter.Parser);
    private readonly pbc::RepeatedField<global::Example.ProtoBuf.rsp_enter> objectList_ = new pbc::RepeatedField<global::Example.ProtoBuf.rsp_enter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Example.ProtoBuf.rsp_enter> ObjectList {
      get { return objectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IntValue != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(IntValue);
      }
      if (LongValue != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(LongValue);
      }
      if (StrValue.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StrValue);
      }
      intArray_.WriteTo(output, _repeated_intArray_codec);
      objectList_.WriteTo(output, _repeated_objectList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IntValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IntValue);
      }
      if (LongValue != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LongValue);
      }
      if (StrValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrValue);
      }
      size += intArray_.CalculateSize(_repeated_intArray_codec);
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IntValue = input.ReadUInt32();
            break;
          }
          case 16: {
            LongValue = input.ReadUInt64();
            break;
          }
          case 26: {
            StrValue = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            intArray_.AddEntriesFrom(input, _repeated_intArray_codec);
            break;
          }
          case 42: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class rsp_enter : pb::IMessage {
    private static readonly pb::MessageParser<rsp_enter> _parser = new pb::MessageParser<rsp_enter>(() => new rsp_enter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<rsp_enter> Parser { get { return _parser; } }

    /// <summary>Field number for the "room_id" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private uint roomId_;
    /// <summary>
    ///房间号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "map_id" field.</summary>
    public const int MapIdFieldNumber = 2;
    private uint mapId_;
    /// <summary>
    ///地图文件编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RoomId);
      }
      if (MapId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MapId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RoomId);
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadUInt32();
            break;
          }
          case 16: {
            MapId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
